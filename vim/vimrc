" to refresh .vimrc => :so ~/.vimrc
" to refresh (in neovim) .init.vim => :so ~/.config/nvim/init.vim
call plug#begin('~/.local/share/nvim/plugged')

  " Some default options preseted
  " (I remove some default config thanks to this)
  Plug 'tpope/vim-sensible' 
  " theme
  Plug 'sonph/onehalf', {'rtp': 'vim/'}
  Plug 'jimeno0/laserwave'
  " Sintax hlgt
  Plug 'jxnblk/vim-mdx-js'
  Plug 'MaxMEllon/vim-jsx-pretty'
  Plug 'pangloss/vim-javascript'
  Plug 'jparise/vim-graphql'
  Plug 'hail2u/vim-css3-syntax'
  Plug 'leafgarland/typescript-vim'
  Plug 'tpope/vim-commentary'
  Plug 'amadeus/vim-mjml'
  " files tree
  Plug 'scrooloose/nerdtree'
 " Plug 'Xuyuanp/nerdtree-git-plugin'
  "Plug 'ryanoasis/vim-devicons' "Needs Fura font: https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/FiraCode/Regular/complete/Fura%20Code%20Regular%20Nerd%20Font%20Complete.ttf
  " search with ctrl-p
  Plug 'ctrlpvim/ctrlp.vim'
  " search in files with ctrl-s ===> needs ack: install via -> brew install ack
  Plug 'dyng/ctrlsf.vim'
  " autocomplete like VScode
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  "navigate like tmux in vim
  Plug 'christoomey/vim-tmux-navigator'
  "integrate Git in vim opened files
  Plug 'airblade/vim-gitgutter'
  "show css colors
  Plug 'ap/vim-css-color'
  "Improve copy registers extending " and @
  Plug 'junegunn/vim-peekaboo'
  "Vim maximizer to maximize a split
  Plug 'szw/vim-maximizer'



call plug#end()

" maximize current split or return to previous
noremap <C-w>m :MaximizerToggle<CR>

set termguicolors
" Color options
" colorscheme onehalfdark
colorscheme laserwave

" Sidebar nerdtree options
let NERDTreeShowHidden=1
map <silent> <C-n> :NERDTreeFind<CR>
let g:NERDTreeWinSize=40

" let g:NERDTreeIgnore = ['^node_modules$']


" Find files ctrlp 
" exclude folders in gitIgnore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard', '__reports__', 'public']
let g:ctrlp_show_hidden = 1 

" remap for ctrlf 
nmap     <C-F>f <Plug>CtrlSFPrompt                  
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath

" igonre folders for ctrl f
let g:ctrlsf_ignore_dir = ['__reports__', 'demo', 'public', '.cache', 'dist']

" Use js snippets in mdx
autocmd FileType markdown.mdx UltiSnipsAddFiletypes javascript  
autocmd FileType mjml UltiSnipsAddFiletypes javascript  

"Consider jsx files as js files in order to use the javascript pluggins 
augroup filetype_jsx
    autocmd!
    autocmd FileType javascriptreact set filetype=javascript
augroup END


" comment lines with ctrl + /
nmap <C-_> :Commentary<CR>
vmap <C-_> :Commentary<CR>

" maximize current split or return to previous
noremap <C-w>m :MaximizerToggle<CR>

"################### Custon NO-PLUGIN CONFIG ###############

" higlight search
:set hlsearch

" Turn off highlight match on press enter
nnoremap <CR> :noh<CR><CR>                           

" Search case sensitive only when use Capitals letters to find
:set ignorecase
:set smartcase

"Copy to clipboard on selection+Y
" in MacOS ==>
noremap Y "*y   
"in linux
" noremap Y :w !xclip -i -sel c



" Keep the error column always visible (jumpy when linter runs on input)
:set signcolumn=yes

"show line number and relative line number
set nu
" set relativenumber

" Indent using spaces instead of tabs
set expandtab

" Dont wrap lines
set nowrap

" The number of spaces to use for each indent
set shiftwidth=2

" Number of spaces to use for a <Tab> during editing operations
set softtabstop=2

" using caps lock as ctrl and ctrl-c as ESC:
" needed to do insert block!!!!
inoremap <C-c> <Esc>

" Add this option to avoid issues with webpack
:set backupcopy=yes


" coc config
" NOTE: we need the coc-settings.json for the eslint autosave
" NOTE: uses ultisnipets: snippets defined in the vim/UltiSnips folder, also
" accesible via  :CocCommand snippets.editSnippets 

let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-eslint',
  \ 'coc-tsserver',
  \ 'coc-prettier',
  \ 'coc-json',
  \ 'coc-flow',
  \ ]


" ------------------------------------------------------
"  
" CoC config from: https://github.com/neoclide/coc.nvim
" just copy/pasted from the readme.md
"
" --------------------------------------------------------


" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
